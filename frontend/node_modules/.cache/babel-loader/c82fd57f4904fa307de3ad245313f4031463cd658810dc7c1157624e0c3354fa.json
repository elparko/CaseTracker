{"ast":null,"code":"// frontend/src/services/api.ts\n\nconst API_BASE_URL = 'http://localhost:8000/api';\nexport class ApiService {\n  static async uploadAudio(audioFile) {\n    const formData = new FormData();\n    formData.append('audio', audioFile);\n    const response = await fetch(`${API_BASE_URL}/cases/upload-audio`, {\n      method: 'POST',\n      body: formData\n    });\n    if (!response.ok) {\n      throw new Error('Failed to upload audio');\n    }\n    return response.json();\n  }\n  static async getCases(skip = 0, limit = 100) {\n    const response = await fetch(`${API_BASE_URL}/cases?skip=${skip}&limit=${limit}`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch cases');\n    }\n    return response.json();\n  }\n  static async getCase(caseId) {\n    const response = await fetch(`${API_BASE_URL}/cases/${caseId}`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch case');\n    }\n    return response.json();\n  }\n  static async updateCase(caseId, caseData) {\n    const response = await fetch(`${API_BASE_URL}/cases/${caseId}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(caseData)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to update case');\n    }\n    return response.json();\n  }\n  static async deleteCase(caseId) {\n    const response = await fetch(`${API_BASE_URL}/cases/${caseId}`, {\n      method: 'DELETE'\n    });\n    if (!response.ok) {\n      throw new Error('Failed to delete case');\n    }\n  }\n  static async getAnalytics() {\n    const response = await fetch(`${API_BASE_URL}/analytics/summary`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch analytics');\n    }\n    return response.json();\n  }\n}","map":{"version":3,"names":["API_BASE_URL","ApiService","uploadAudio","audioFile","formData","FormData","append","response","fetch","method","body","ok","Error","json","getCases","skip","limit","getCase","caseId","updateCase","caseData","headers","JSON","stringify","deleteCase","getAnalytics"],"sources":["/Users/parker/Code/CaseTracker/frontend/src/services/api.ts"],"sourcesContent":["// frontend/src/services/api.ts\n\ninterface PatientDemographics {\n    age_range: string;\n    gender: string;\n  }\n  \n  interface MedicalCase {\n    id: string;\n    audio_file_path: string;\n    transcription: string;\n    specialty: string;\n    case_type: string;\n    complexity: string;\n    patient_demographics: PatientDemographics;\n    summary: string;\n    key_findings: string[];\n    differential_diagnosis: string[];\n    learning_points: string[];\n    tags: string[];\n    notes?: string;\n    is_favorite: boolean;\n    created_at: string;\n    updated_at?: string;\n  }\n  \n  const API_BASE_URL = 'http://localhost:8000/api';\n  \n  export class ApiService {\n    static async uploadAudio(audioFile: File): Promise<any> {\n      const formData = new FormData();\n      formData.append('audio', audioFile);\n  \n      const response = await fetch(`${API_BASE_URL}/cases/upload-audio`, {\n        method: 'POST',\n        body: formData,\n      });\n  \n      if (!response.ok) {\n        throw new Error('Failed to upload audio');\n      }\n  \n      return response.json();\n    }\n  \n    static async getCases(skip = 0, limit = 100): Promise<MedicalCase[]> {\n      const response = await fetch(`${API_BASE_URL}/cases?skip=${skip}&limit=${limit}`);\n      \n      if (!response.ok) {\n        throw new Error('Failed to fetch cases');\n      }\n  \n      return response.json();\n    }\n  \n    static async getCase(caseId: string): Promise<MedicalCase> {\n      const response = await fetch(`${API_BASE_URL}/cases/${caseId}`);\n      \n      if (!response.ok) {\n        throw new Error('Failed to fetch case');\n      }\n  \n      return response.json();\n    }\n  \n    static async updateCase(caseId: string, caseData: Partial<MedicalCase>): Promise<MedicalCase> {\n      const response = await fetch(`${API_BASE_URL}/cases/${caseId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(caseData),\n      });\n  \n      if (!response.ok) {\n        throw new Error('Failed to update case');\n      }\n  \n      return response.json();\n    }\n  \n    static async deleteCase(caseId: string): Promise<void> {\n      const response = await fetch(`${API_BASE_URL}/cases/${caseId}`, {\n        method: 'DELETE',\n      });\n  \n      if (!response.ok) {\n        throw new Error('Failed to delete case');\n      }\n    }\n  \n    static async getAnalytics(): Promise<any> {\n      const response = await fetch(`${API_BASE_URL}/analytics/summary`);\n      \n      if (!response.ok) {\n        throw new Error('Failed to fetch analytics');\n      }\n  \n      return response.json();\n    }\n  }\n  \n  export type { MedicalCase, PatientDemographics };"],"mappings":"AAAA;;AA0BE,MAAMA,YAAY,GAAG,2BAA2B;AAEhD,OAAO,MAAMC,UAAU,CAAC;EACtB,aAAaC,WAAWA,CAACC,SAAe,EAAgB;IACtD,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEH,SAAS,CAAC;IAEnC,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,YAAY,qBAAqB,EAAE;MACjES,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEN;IACR,CAAC,CAAC;IAEF,IAAI,CAACG,QAAQ,CAACI,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;IAC3C;IAEA,OAAOL,QAAQ,CAACM,IAAI,CAAC,CAAC;EACxB;EAEA,aAAaC,QAAQA,CAACC,IAAI,GAAG,CAAC,EAAEC,KAAK,GAAG,GAAG,EAA0B;IACnE,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,YAAY,eAAee,IAAI,UAAUC,KAAK,EAAE,CAAC;IAEjF,IAAI,CAACT,QAAQ,CAACI,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;IAC1C;IAEA,OAAOL,QAAQ,CAACM,IAAI,CAAC,CAAC;EACxB;EAEA,aAAaI,OAAOA,CAACC,MAAc,EAAwB;IACzD,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,YAAY,UAAUkB,MAAM,EAAE,CAAC;IAE/D,IAAI,CAACX,QAAQ,CAACI,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;IACzC;IAEA,OAAOL,QAAQ,CAACM,IAAI,CAAC,CAAC;EACxB;EAEA,aAAaM,UAAUA,CAACD,MAAc,EAAEE,QAA8B,EAAwB;IAC5F,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,YAAY,UAAUkB,MAAM,EAAE,EAAE;MAC9DT,MAAM,EAAE,KAAK;MACbY,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDX,IAAI,EAAEY,IAAI,CAACC,SAAS,CAACH,QAAQ;IAC/B,CAAC,CAAC;IAEF,IAAI,CAACb,QAAQ,CAACI,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;IAC1C;IAEA,OAAOL,QAAQ,CAACM,IAAI,CAAC,CAAC;EACxB;EAEA,aAAaW,UAAUA,CAACN,MAAc,EAAiB;IACrD,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,YAAY,UAAUkB,MAAM,EAAE,EAAE;MAC9DT,MAAM,EAAE;IACV,CAAC,CAAC;IAEF,IAAI,CAACF,QAAQ,CAACI,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;IAC1C;EACF;EAEA,aAAaa,YAAYA,CAAA,EAAiB;IACxC,MAAMlB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,YAAY,oBAAoB,CAAC;IAEjE,IAAI,CAACO,QAAQ,CAACI,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;IAC9C;IAEA,OAAOL,QAAQ,CAACM,IAAI,CAAC,CAAC;EACxB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}